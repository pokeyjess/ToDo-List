{"version":3,"sources":["Todoitem.js","Todolist.js","actions.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["TodoItem","className","this","props","completed","type","checked","onChange","event","handleToggleComplete","id","title","onClick","handleDeleteTodo","Component","TodoList","todos","map","todo","toggleTodo","deleteTodo","mapDispatchToProps","todoIdToDelete","payload","todoIdToToggle","connect","App","state","todosList","handleClearCompletedTodos","clearCompletedTodos","handleCreateTodo","key","addTodo","target","value","placeholder","autoFocus","onKeyDown","exact","path","filter","activeClassName","to","todoTitle","userId","Math","floor","random","Boolean","window","location","hostname","match","initialState","todosReducer","action","newTodoList","slice","push","newTodos","newnewTodos","store","createStore","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de8bf671.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={this.props.completed}\n            onChange={event =>\n              this.props.handleToggleComplete(event, this.props.id)\n            }\n          />\n          <label>{this.props.title}</label>\n          <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from \"./Todoitem\";\nimport { connect } from \"react-redux\";\nimport { deleteTodo, toggleTodo } from \"./actions\";\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {this.props.todos.map(todo => (\n            <TodoItem\n              handleToggleComplete={event => this.props.toggleTodo(todo.id)}\n              handleDeleteTodo={event => this.props.deleteTodo(todo.id)}\n              title={todo.title}\n              completed={todo.completed}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\nconst mapDispatchToProps = {\n  deleteTodo,\n  toggleTodo\n};\nexport default connect(null, mapDispatchToProps)(TodoList);\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\n\nexport const addTodo = todoTitle => {\n  const newTodo = {\n    userId: 1,\n    id: Math.floor(Math.random() * 10000000),\n    title: todoTitle,\n    completed: false\n  };\n  return {\n    type: ADD_TODO,\n    payload: newTodo\n  };\n};\n\nexport const toggleTodo = todoIdToToggle => {\n  return {\n    type: TOGGLE_TODO,\n    payload: todoIdToToggle\n  };\n};\n\nexport const deleteTodo = todoIdToDelete => {\n  return {\n    type: DELETE_TODO,\n    payload: todoIdToDelete\n  };\n};\n\nexport const clearCompletedTodos = () => {\n  return {\n    type: CLEAR_COMPLETED_TODOS\n  };\n};\n","import React, { Component } from \"react\";\nimport TodoList from \"./Todolist\";\nimport \"./index.css\";\nimport todosList from \"./todos.json\";\nimport { Route, NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { addTodo, clearCompletedTodos } from \"./actions\";\n\nclass App extends Component {\n  state = {\n    todos: todosList\n  };\n  handleClearCompletedTodos = event => {\n    this.props.clearCompletedTodos();\n  };\n\n  handleCreateTodo = event => {\n    if (event.key === \"Enter\") {\n      this.props.addTodo(event.target.value);\n      event.target.value = \"\";\n    }\n  };\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>My To Do List</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            onKeyDown={this.handleCreateTodo}\n          />\n        </header>\n        <Route exact path=\"/\">\n          <TodoList todos={this.props.todos} />\n        </Route>\n        <Route exact path=\"/active\">\n          <TodoList\n            todos={this.props.todos.filter(todo => todo.completed === false)}\n          />\n        </Route>\n        <Route exact path=\"/completed\">\n          <TodoList\n            todos={this.props.todos.filter(todo => todo.completed === true)}\n          />\n        </Route>\n\n        <footer className=\"footer\">\n          {/* <!-- This should be `0 items left` by default --> */}\n          <span className=\"todo-count\">\n            <strong>\n              0\n              {/*\n                this.state.todos.filter(todo => {\n                  ---need to return true/false. \n                  see how used other filters\n              }\n              ).length */}\n            </strong>{\" \"}\n            item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <NavLink exact activeClassName=\"selected\" to=\"/\">\n                All\n              </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"selected\" to=\"/active\">\n                Active\n              </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"selected\" to=\"/completed\">\n                Completed\n              </NavLink>\n            </li>\n          </ul>\n          <button\n            onClick={this.handleClearCompletedTodos}\n            className=\"clear-completed\"\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\nconst mapDispatchToProps = {\n  addTodo,\n  clearCompletedTodos\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import todosList from \"./todos.json\";\nimport {\n  ADD_TODO,\n  TOGGLE_TODO,\n  DELETE_TODO,\n  CLEAR_COMPLETED_TODOS\n} from \"./actions.js\";\n\nconst initialState = {\n  todos: todosList\n};\n\nconst todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO: {\n      const newTodoList = state.todos.slice();\n      newTodoList.push(action.payload);\n      return { todos: newTodoList };\n    }\n    case TOGGLE_TODO: {\n      const newTodos = state.todos.slice();\n      const newnewTodos = newTodos.map(todo => {\n        if (todo.id === action.payload) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n      return { todos: newnewTodos };\n    }\n    case DELETE_TODO: {\n      const newTodoList = state.todos.filter(todo => {\n        if (todo.id === action.payload) {\n          return false;\n        }\n        return true;\n      });\n      return { todos: newTodoList };\n    }\n    case CLEAR_COMPLETED_TODOS: {\n      const newTodoList = state.todos.filter(todo => {\n        if (todo.completed === true) {\n          return false;\n        }\n        return true;\n      });\n      {\n        return { todos: newTodoList };\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore } from \"redux\";\nimport todosReducer from \"./reducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(todosReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}